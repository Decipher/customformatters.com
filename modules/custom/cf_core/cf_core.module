<?php
/**
 * @file
 * Code for the CustomFormatters core feature.
 */

/**
 * Features include.
 */
include_once('cf_core.features.inc');

/**
 * Include additional files.
 */
foreach (module_list() as $module) {
  if (file_exists($file = dirname(__FILE__) . "/includes/{$module}.inc")) {
    require_once $file;
  }
}

/**
 * Check the site status and return a Boolean value based on the comparison
 * state provided.
 */
function cf_core_is_state($state) {
  // Production state.
  if ($GLOBALS['base_url'] == 'http://customformatters.com') {
    return $state == 'prod';
  }

  // Staging state.
  if (preg_match('/stage.*?\.customformatters\.com/', $GLOBALS['base_url'])) {
    return $state == 'stage';
  }

  // Development state.
  return $state == 'dev';
}

/**
 *
 */
function _cf_core_get_releases($versions, $type = 'latest') {
  $releases = array();

  module_load_include('inc', 'update', 'update.fetch');
  foreach ($versions as $version) {
    $cache = cache_get("cf_core:releases:{$version}");
    if (!$cache) {
      $xml = drupal_http_request(variable_get('update_fetch_url', UPDATE_DEFAULT_URL) . "/custom_formatters/{$version}");
      if (!isset($xml->error) && isset($xml->data)) {
        $data = $xml->data;
      }

      if (!empty($data)) {
        $data = update_parse_xml($data);
        $data = $data['releases'];
        cache_set("cf_core:releases:{$version}", $data, 'cache', time() + 86400);
      }
    }
    else {
      $data = $cache->data;
    }

    foreach (element_children($data) as $release) {
      switch ($type) {
        case 'latest':
          // @TODO
          break;

        case 'stable':
          if (preg_match("/^{$version}-\d+.\d+$/", $release)) {
            $releases[$version][$release] = $data[$release];
          }
          break;
      }
    }

    unset($data);
  }

  return $releases;
}

/**
 *
 */
function _cf_core_process_formatter($data) {
  $formatter = NULL;

  // Initialise Grammar Parser.
  $reader = PGPReader::getInstance();
  $reader->setSnippet($data);
  $reader->addTokenNames();
  $reader->buildGrammar();
  $statements = $reader->getStatements();
  $editor = PGPEditor::getInstance();

  // Traverse statement list to gather items.
  $current = $statements->first();
  while ($current != NULL) {
    $statement = $current->data;
    $type = is_object($statement) ? $statement->type : $statement['type'];
    if (T_ASSIGNMENT == $type) {
      switch (TRUE) {
        case '$formatter' == $editor->statementOperandToText($statement):
          $formatter = new stdClass();
          break;

        case preg_match('/\$formatter->(.*)/', $editor->statementOperandToText($statement), $matches):
          $value = $statement->getValue()->first()->data;

          if (is_array($value) && T_CONSTANT_ENCAPSED_STRING == $value['type']) {
            // The key is a simple string.
            $formatter->{$matches[1]} = trim($value['value'], "'\" ");
          }
          elseif ($value instanceof PGPOperand) {
            // T_STRING values like TRUE.
            $formatter->{$matches[1]} = 'TRUE' == $value->toString();
          }
          elseif (is_numeric($value)) {
            $formatter->{$matches[1]} = (int) $value;
          }
          break;
      }
    }
    $current = $current->next;
  }

  return $formatter;
}
